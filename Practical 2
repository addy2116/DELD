#include <iostream>
#include <graphics.h>

using namespace std;

// Define the clipping window's boundaries
const int LEFT = 100, RIGHT = 400, BOTTOM = 100, TOP = 400;

// Define the 4-bit region codes
#define INSIDE 0x0 // 0000
#define LEFT_CODE 0x1 // 0001
#define RIGHT_CODE 0x2 // 0010
#define BOTTOM_CODE 0x4 // 0100
#define TOP_CODE 0x8 // 1000

// Structure to represent a point (x, y)
struct Point {
    int x, y;
};

// Compute the region code for a point
int computeRegionCode(int x, int y) {
    int code = INSIDE;

    if (x < LEFT) { // To the left of the window
        code |= LEFT_CODE;
    } else if (x > RIGHT) { // To the right of the window
        code |= RIGHT_CODE;
    }
    if (y < BOTTOM) { // Below the window
        code |= BOTTOM_CODE;
    } else if (y > TOP) { // Above the window
        code |= TOP_CODE;
    }

    return code;
}

// Perform the Cohen-Sutherland Line Clipping algorithm
void cohenSutherlandClip(Point &p1, Point &p2) {
    // Compute region codes for both endpoints
    int code1 = computeRegionCode(p1.x, p1.y);
    int code2 = computeRegionCode(p2.x, p2.y);

    // Loop to clip the line
    bool accept = false;

    while (true) {
        if ((code1 == 0) && (code2 == 0)) {
            // Both points are inside, accept the line
            accept = true;
            break;
        } else if (code1 & code2) {
            // Both points are outside the same boundary, reject the line
            break;
        } else {
            // One point is outside, calculate the intersection with the rectangle
            int codeOut;
            float x, y;

            // Choose the point outside the rectangle
            if (code1 != 0) {
                codeOut = code1;
            } else {
                codeOut = code2;
            }

            // Calculate intersection point using the line equation
            if (codeOut & TOP_CODE) {
                // Intersection with the top boundary
                x = p1.x + (p2.x - p1.x) * (TOP - p1.y) / (p2.y - p1.y);
                y = TOP;
            } else if (codeOut & BOTTOM_CODE) {
                // Intersection with the bottom boundary
                x = p1.x + (p2.x - p1.x) * (BOTTOM - p1.y) / (p2.y - p1.y);
                y = BOTTOM;
            } else if (codeOut & RIGHT_CODE) {
                // Intersection with the right boundary
                y = p1.y + (p2.y - p1.y) * (RIGHT - p1.x) / (p2.x - p1.x);
                x = RIGHT;
            } else if (codeOut & LEFT_CODE) {
                // Intersection with the left boundary
                y = p1.y + (p2.y - p1.y) * (LEFT - p1.x) / (p2.x - p1.x);
                x = LEFT;
            }

            // Update the point outside the rectangle
            if (codeOut == code1) {
                p1.x = x;
                p1.y = y;
                code1 = computeRegionCode(p1.x, p1.y);
            } else {
                p2.x = x;
                p2.y = y;
                code2 = computeRegionCode(p2.x, p2.y);
            }
        }
    }

    // Draw the final clipped line
    if (accept) {
        line(p1.x, p1.y, p2.x, p2.y);
    }
}

int main() {
    // Initialize graphics mode
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    // Define a line that we will clip
    Point p1 = {50, 50}; // Outside the window
    Point p2 = {450, 450}; // Outside the window

    // Draw the clipping window (rectangle)
    rectangle(LEFT, BOTTOM, RIGHT, TOP);

    // Perform Cohen-Sutherland clipping
    cohenSutherlandClip(p1, p2);

    // Wait for user input to close the graphics window
    getch();
    closegraph();
    return 0;
}
